{"version":3,"sources":["components/.DictionaryDetailView/EntryCard/EntryCard.module.scss","components/DictionaryListView/DictionaryCard/DictionaryCard.module.scss","components/DictionaryListView/DictionaryCard/ValidityTag/ValidityTag.module.scss","components/.DictionaryDetailView/DetailViewHeader/DetailViewHeader.module.scss","components/.DictionaryDetailView/NewEntryForm/NewEntryForm.module.scss","components/App.module.scss","components/GenericCard/GenericCard.module.scss","components/DictionaryListView/DictionaryForm/DictionaryForm.module.scss","components/DictionaryListView/ListViewHeader/ListViewHeader.module.scss","components/ResponsiveContainer/ResponsiveContainer.module.scss","components/Footer/Footer.module.scss","components/Notifications/Notifications.module.scss","components/DictionaryListView/DictionaryListView.module.scss","components/.DictionaryDetailView/DictionaryDetailView.module.scss","serviceWorker.js","store/reducers/entryReducer.js","store/reducers/dictionaryReducer.js","store/reducers/notificationReducer.js","store/reducers/index.js","store/actions/types.js","store/index.js","components/Footer/Footer.js","store/actions/index.js","components/Notifications/Notifications.js","components/App.js","helpers/index.js","components/DictionaryListView/DictionaryCard/ValidityTag/ValidityTag.js","components/GenericCard/GenericCard.js","components/DictionaryListView/DictionaryCard/DictionaryCard.js","components/DictionaryListView/DictionaryForm/DictionaryForm.js","components/DictionaryListView/ListViewHeader/ListViewHeader.js","components/ResponsiveContainer/ResponsiveContainer.js","components/DictionaryListView/DictionaryListView.js","components/.DictionaryDetailView/NewEntryForm/NewEntryForm.js","components/.DictionaryDetailView/DetailViewHeader/DetailViewHeader.js","components/.DictionaryDetailView/EntryCard/EntryCard.js","components/.DictionaryDetailView/Entries/Entries.js","components/.DictionaryDetailView/DictionaryDetailView.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","persistedState","localStorage","getItem","JSON","parse","entries","timestamp","Date","now","id1","uuid","id2","id3","initial","name","id","created","edited","numErrors","validated","entryIds","dictionaries","visible","message","rootReducer","combineReducers","action","type","entry","payload","newEntry","updatedEntry","copy","Object","assign","removedEntry","entryId","flags","clearedEntries","forEach","duplicate","fork","cycle","chain","dict","newDictionary","updatedDict","updatedDictionary","removedDictionary","dictId","concat","index","indexOf","splice","notification","store","createStore","composeWithDevTools","subscribe","setItem","stringify","getState","Footer","className","styles","mainFooter","href","target","rel","title","setEntryErrorFlags","clearEntryErrorFlags","updateDictionary","connect","state","ownProps","hideNotification","useEffect","timer","setTimeout","clearTimeout","App","props","contentWrapper","mainContent","children","objToArrOrdered","hashtable","keys","length","arr","i","current","push","clean","string","trim","toLowerCase","getSanitizedPair","domain","range","findCycles","cycleIds","map","entriesHashed","reduce","acc","cur","findCycle","initialId","currentId","depth","maxDepth","currentRange","undefined","newCurrentId","find","getEntryErrorTable","entryErrorTable","duplicateIds","entry1","domain1","range1","some","entry2","domain2","range2","findDuplicates","forkedIds","findForks","chainIds","y","findChains","ValidityTag","valid","base","singular","error","unchecked","renderInvalidTag","GenericCard","card","Content","content","withRouter","removeDictionary","lastEditText","moment","fromNow","style","position","to","left","right","top","bottom","flexWrap","meta","mdot","btn","btnValidate","btnDelete","onClick","evt","preventDefault","addDictionary","useState","inputValue","setInputValue","isFormValid","onSubmit","newDict","form","aria-label","maxLength","value","placeholder","onChange","nameInput","ListViewHeader","currentDictionary","header","heading","ResponsiveContainer","center","container","values","item","sort","dictA","dictB","key","params","addEntry","addEntryIdToDictionary","setState","domainInputRef","useRef","handleChange","focus","inputContainer","input","ref","currentDict","showNotification","handleValidation","objEntries","constructor","btnReturn","dictName","updateEntry","removeEntryIdFromDictionary","removeEntry","flagIcon","rangeInputRef","handleBlur","resetEmptyInput","handleKeyPress","blur","defaultValue","entryInput","onKeyPress","onBlur","minLength","warning","hidden","severeError","history","ReactDOM","render","basename","process","path","exact","component","DictionaryListView","DictionaryDetailView","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b938a37a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexWrap\":\"EntryCard_flexWrap__1OWc_\",\"entryInput\":\"EntryCard_entryInput__1r3IS\",\"btnDelete\":\"EntryCard_btnDelete__GSQLY\",\"flags\":\"EntryCard_flags__EzYly\",\"warning\":\"EntryCard_warning__1NSMv\",\"error\":\"EntryCard_error__10mDl\",\"severeError\":\"EntryCard_severeError__3U50y\",\"hidden\":\"EntryCard_hidden__2cFME\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"DictionaryCard_name__3MHt3\",\"meta\":\"DictionaryCard_meta__1L3VC\",\"mdot\":\"DictionaryCard_mdot__2tYfu\",\"flexWrap\":\"DictionaryCard_flexWrap__22Nsu\",\"btn\":\"DictionaryCard_btn__3n0dX\",\"btnDelete\":\"DictionaryCard_btnDelete__25J0G\",\"btnValidate\":\"DictionaryCard_btnValidate__CClU0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"base\":\"ValidityTag_base__kNfMh\",\"valid\":\"ValidityTag_valid__2Chfx\",\"error\":\"ValidityTag_error__uwrT1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"DetailViewHeader_header__3sLDz\",\"btnReturn\":\"DetailViewHeader_btnReturn__36lUY\",\"btnValidate\":\"DetailViewHeader_btnValidate__SxmGX\",\"valid\":\"DetailViewHeader_valid__3kB_j\",\"dictName\":\"DetailViewHeader_dictName__tnNvN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewEntryForm_form__2YDzS\",\"inputContainer\":\"NewEntryForm_inputContainer__1QeOp\",\"input\":\"NewEntryForm_input__2Aa2q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentWrapper\":\"App_contentWrapper__ukNqe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"GenericCard_card__3pykX\",\"content\":\"GenericCard_content__BOdCL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"DictionaryForm_form__hWCNE\",\"nameInput\":\"DictionaryForm_nameInput__1_otS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"ListViewHeader_header__3Lsp5\",\"btnReturn\":\"ListViewHeader_btnReturn__2fEMa\",\"heading\":\"ListViewHeader_heading__1Y4r9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ResponsiveContainer_container__POb4b\",\"center\":\"ResponsiveContainer_center__2gkar\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainFooter\":\"Footer_mainFooter__3n9E-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notifications_notification__ZPRvE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DictionaryListView_container__YZCXG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DictionaryDetailView_container__2lHL2\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/types';\r\n\r\nconst initial = {};\r\n\r\n// look for data in localStorage\r\nconst persistedState = localStorage.getItem('dictApp') ? JSON.parse(localStorage.getItem('dictApp')).entries : initial;\r\n\r\nexport const entryReducer = (entries = persistedState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_ENTRY: {\r\n            const entry = action.payload.newEntry;\r\n            return { ...entries, [entry.id]: entry };\r\n        }\r\n        case actionTypes.UPDATE_ENTRY: {\r\n            const entry = action.payload.updatedEntry;\r\n            return { ...entries, [entry.id]: entry };\r\n        }\r\n\r\n        case actionTypes.REMOVE_ENTRY: {\r\n            const copy = Object.assign({}, { ...entries });\r\n            delete copy[action.payload.removedEntry.id];\r\n            return copy;\r\n        }\r\n\r\n        case actionTypes.SET_ENTRY_ERROR_FLAGS: {\r\n            let { entryId, flags } = action.payload;\r\n            const entry = { ...entries[entryId], ...flags };\r\n            return { ...entries, [entry.id]: entry };\r\n        }\r\n\r\n        case actionTypes.CLEAR_ENTRY_ERROR_FLAGS: {\r\n            let entryIds = action.payload.entryIds;\r\n            let clearedEntries = {};\r\n            entryIds.forEach(id => {\r\n                clearedEntries[id] = { ...entries[id], duplicate: false, fork: false, cycle: false, chain: false };\r\n            });\r\n            return { ...entries, ...clearedEntries };\r\n        }\r\n\r\n        default:\r\n            return entries;\r\n    }\r\n};\r\n","import * as actionTypes from '../actions/types';\r\nimport uuid from 'uuid';\r\n\r\nconst timestamp = Date.now(),\r\n    id1 = uuid(),\r\n    id2 = uuid(),\r\n    id3 = uuid();\r\n\r\nconst initial = {\r\n    [id1]: {\r\n        name: 'My Dictionary 1',\r\n        id: id1,\r\n        created: timestamp - 3,\r\n        edited: timestamp - 3,\r\n        numErrors: 0,\r\n        validated: false,\r\n        entryIds: []\r\n    },\r\n    [id2]: {\r\n        name: 'My Dictionary 2',\r\n        id: id2,\r\n        created: timestamp - 2,\r\n        edited: timestamp - 2,\r\n        numErrors: 0,\r\n        validated: false,\r\n        entryIds: []\r\n    },\r\n    [id3]: {\r\n        name: 'My Dictionary 3',\r\n        id: id3,\r\n        created: timestamp - 1,\r\n        edited: timestamp - 1,\r\n        numErrors: 0,\r\n        validated: false,\r\n        entryIds: []\r\n    }\r\n};\r\n\r\n// look for data in localStorage\r\nconst persistedState = localStorage.getItem('dictApp')\r\n    ? JSON.parse(localStorage.getItem('dictApp')).dictionaries\r\n    : initial;\r\n\r\nexport const dictionaryReducer = (dictionaries = persistedState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_DICTIONARY: {\r\n            const dict = action.payload.newDictionary;\r\n            return { ...dictionaries, ...{ [dict.id]: dict } };\r\n        }\r\n        case actionTypes.UPDATE_DICTIONARY: {\r\n            const updatedDict = action.payload.updatedDictionary;\r\n            return { ...dictionaries, [updatedDict.id]: updatedDict };\r\n        }\r\n        case actionTypes.REMOVE_DICTIONARY: {\r\n            const copy = Object.assign({}, { ...dictionaries });\r\n            delete copy[action.payload.removedDictionary.id];\r\n            return copy;\r\n        }\r\n        case actionTypes.ADD_ENTRY_ID_TO_DICTIONARY: {\r\n            const { entryId, dictId } = action.payload;\r\n            const edited = Date.now();\r\n            const entryIds = dictionaries[dictId].entryIds.concat(entryId);\r\n            return {\r\n                ...dictionaries,\r\n                [dictId]: { ...dictionaries[dictId], edited, entryIds, validated: false, numErrors: 0 }\r\n            };\r\n        }\r\n        case actionTypes.REMOVE_ENTRY_ID_FROM_DICTIONARY: {\r\n            const { entryId, dictId } = action.payload;\r\n            const edited = Date.now();\r\n            const entryIds = [...dictionaries[dictId].entryIds];\r\n            const index = entryIds.indexOf(entryId);\r\n            entryIds.splice(index, 1);\r\n            return {\r\n                ...dictionaries,\r\n                [dictId]: { ...dictionaries[dictId], edited, entryIds, validated: false, numErrors: 0 }\r\n            };\r\n        }\r\n        default:\r\n            return dictionaries;\r\n    }\r\n};\r\n","import * as actionTypes from '../actions/types';\r\n\r\nconst initial = {\r\n    visible: false,\r\n    message: 'error'\r\n};\r\n\r\nexport const notificationReducer = (notification = initial, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SHOW_NOTIFICATION: {\r\n            return { visible: true, message: action.payload.message };\r\n        }\r\n        case actionTypes.HIDE_NOTIFICATION: {\r\n            return { visible: false, message: '' };\r\n        }\r\n\r\n        default:\r\n            return notification;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { entryReducer } from './entryReducer';\r\nimport { dictionaryReducer } from './dictionaryReducer';\r\nimport { notificationReducer } from './notificationReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    entries: entryReducer,\r\n    dictionaries: dictionaryReducer,\r\n    notification: notificationReducer\r\n});\r\n","// Entry Action Types (An entry is a key/value pair inside a dictionary)\r\nexport const ADD_ENTRY = 'ADD_ENTRY';\r\nexport const UPDATE_ENTRY = 'UPDATE_ENTRY';\r\nexport const REMOVE_ENTRY = 'REMOVE_ENTRY';\r\nexport const SET_ENTRY_ERROR_FLAGS = 'SET_ENTRY_ERROR_FLAGS';\r\nexport const CLEAR_ENTRY_ERROR_FLAGS = 'CLEAR_ENTRY_ERROR_FLAGS';\r\n\r\n// Dictionary Action Types\r\nexport const ADD_DICTIONARY = 'ADD_DICTIONARY';\r\nexport const UPDATE_DICTIONARY = 'UPDATE_DICTIONARY';\r\nexport const REMOVE_DICTIONARY = 'REMOVE_DICTIONARY';\r\nexport const ADD_ENTRY_ID_TO_DICTIONARY = 'ADD_ENTRY_ID_TO_DICTIONARY';\r\nexport const REMOVE_ENTRY_ID_FROM_DICTIONARY = 'REMOVE_ENTRY_ID_FROM_DICTIONARY';\r\n\r\n// Notification Action Types\r\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\r\nexport const HIDE_NOTIFICATION = 'HIDE_NOTIFICATION';\r\n","import { createStore } from 'redux';\r\nimport { rootReducer } from './reducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// save state in local storage on every state change\r\nstore.subscribe(() => localStorage.setItem('dictApp', JSON.stringify(store.getState())));\r\n","import React from 'react';\r\nimport styles from './Footer.module.scss';\r\n\r\nconst Footer = () => (\r\n    <footer className={styles.mainFooter}>\r\n        <a\r\n            href='https://github.com/andreas-schoch/react-dictionary-managment-app'\r\n            target='_blank'\r\n            rel='noopener noreferrer'\r\n            title='Source Code'>\r\n            <i className='fab fa-github'> </i>\r\n            <span> Source Code</span>\r\n        </a>\r\n    </footer>\r\n);\r\nexport default Footer;\r\n","import * as actionTypes from './types';\r\n\r\n// Entry Actions\r\nexport const addEntry = newEntry => ({\r\n    type: actionTypes.ADD_ENTRY,\r\n    payload: { newEntry }\r\n});\r\n\r\nexport const updateEntry = updatedEntry => ({\r\n    type: actionTypes.UPDATE_ENTRY,\r\n    payload: { updatedEntry }\r\n});\r\n\r\nexport const removeEntry = removedEntry => ({\r\n    type: actionTypes.REMOVE_ENTRY,\r\n    payload: { removedEntry }\r\n});\r\n\r\nexport const setEntryErrorFlags = (entryId, flags) => ({\r\n    type: actionTypes.SET_ENTRY_ERROR_FLAGS,\r\n    payload: { entryId, flags }\r\n});\r\n\r\nexport const clearEntryErrorFlags = entryIds => ({\r\n    type: actionTypes.CLEAR_ENTRY_ERROR_FLAGS,\r\n    payload: { entryIds }\r\n});\r\n\r\n// Dictionary Actions\r\nexport const addDictionary = newDictionary => ({\r\n    type: actionTypes.ADD_DICTIONARY,\r\n    payload: { newDictionary }\r\n});\r\n\r\nexport const updateDictionary = updatedDictionary => ({\r\n    type: actionTypes.UPDATE_DICTIONARY,\r\n    payload: { updatedDictionary }\r\n});\r\n\r\nexport const removeDictionary = removedDictionary => ({\r\n    type: actionTypes.REMOVE_DICTIONARY,\r\n    payload: { removedDictionary }\r\n});\r\n\r\nexport const addEntryIdToDictionary = (entryId, dictId) => ({\r\n    type: actionTypes.ADD_ENTRY_ID_TO_DICTIONARY,\r\n    payload: { entryId, dictId }\r\n});\r\n\r\nexport const removeEntryIdFromDictionary = (entryId, dictId) => ({\r\n    type: actionTypes.REMOVE_ENTRY_ID_FROM_DICTIONARY,\r\n    payload: { entryId, dictId }\r\n});\r\n\r\nexport const showNotification = message => ({\r\n    type: actionTypes.SHOW_NOTIFICATION,\r\n    payload: { message }\r\n});\r\n\r\nexport const hideNotification = () => ({\r\n    type: actionTypes.HIDE_NOTIFICATION\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport styles from './Notifications.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { hideNotification } from '../../store/actions';\r\n\r\nconst Notifications = ({ hideNotification, notification }) => {\r\n    const { message, visible } = notification;\r\n\r\n    useEffect(() => {\r\n        let timer = null;\r\n        timer = setTimeout(() => {\r\n            if (notification.visible) {\r\n                hideNotification();\r\n            }\r\n            return () => {\r\n                clearTimeout(timer);\r\n            };\r\n        }, 3000);\r\n    }, [hideNotification, notification]);\r\n\r\n    return <>{visible && <div className={styles.notification}>{message}</div>}</>;\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    notification: state.notification\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { hideNotification }\r\n)(Notifications);\r\n","import React from 'react';\nimport styles from './App.module.scss';\nimport Footer from './Footer/Footer';\nimport Notifications from './Notifications/Notifications';\n\nconst App = props => {\n    return (\n        <div className={styles.contentWrapper}>\n            <Notifications />\n            <span className={styles.mainContent}>{props.children}</span>\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;\n","/**\r\n * transforms a Hashtable (object containing sub-objects) into an Array of Objects\r\n * @param {Object} hashtable an Object of Sub-Objects\r\n * @returns An Array of Objects\r\n */\r\nexport const objToArr = hashtable => Object.values(hashtable).map(item => item);\r\n\r\n/**\r\n * get certain parts of a Hashtable by providing the keys you are interested in and transforming the partialHashtable into an Array\r\n * @param {Object} hashtable Object of Sub-Objects\r\n * @param {Array} keys an Array of keys (a key equals a sub-objects id property)\r\n * @returns An Array of Objects\r\n */\r\nexport const objToArrOrdered = (hashtable, keys) => {\r\n    // (intentionally not using functional style here for performance reasons)\r\n    const length = keys.length;\r\n    const arr = [];\r\n    for (let i = 0; i < length; i++) {\r\n        const currentId = keys[i];\r\n\r\n        // check if currentId exists and push the value\r\n        const current = hashtable[currentId];\r\n        if (current) {\r\n            arr.push(current);\r\n        }\r\n    }\r\n    return arr;\r\n};\r\n\r\n/**\r\n * get certain parts of a Hashtable by providing the keys you are interested in\r\n * @param {Object} hashtable Object of Sub-Objects\r\n * @param {Array} keys an Array of keys (a key equals a sub-objects id property)\r\n * @returns A Hashtable with all the Sub-Objects of interest\r\n */\r\nexport const objToObjOrdered = (hashtable, keys) => {\r\n    // (intentionally not using functional style here for performance reasons)\r\n    const partialHashtable = {};\r\n\r\n    const length = keys.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const currentId = keys[i];\r\n\r\n        // check if currentId exists and push the value\r\n        const current = hashtable[currentId];\r\n        if (current) {\r\n            partialHashtable[currentId] = current;\r\n        }\r\n    }\r\n    return partialHashtable;\r\n};\r\n\r\n/**\r\n * utility that trims whitespace and makes string all lowercase for easier comparison\r\n * @param {string} string string to be cleaned\r\n * @return {string} cleaned string\r\n */\r\nconst clean = string => string.trim().toLowerCase();\r\n\r\n/**\r\n * utility to trims whitespace and sets domain and range to lowercase for easier comparison\r\n * @param {object} entry a dict entry object with domain and range properties\r\n * @returns {array} an Array with cleaned [domain, range]\r\n */\r\nconst getSanitizedPair = ({ domain, range }) => [clean(domain), clean(range)];\r\n\r\n// Duplicates. Duplicate Domain - Range pairs: Two rows in the dictionary map to the same value\r\nconst findDuplicates = entries => {\r\n    const duplicateIds = [];\r\n\r\n    entries.forEach(entry1 => {\r\n        const [domain1, range1] = getSanitizedPair(entry1);\r\n\r\n        const foundDuplicate = entries.some(entry2 => {\r\n            const [domain2, range2] = getSanitizedPair(entry2);\r\n            return entry1.id !== entry2.id && domain1 === domain2 && range1 === range2;\r\n        });\r\n\r\n        if (foundDuplicate) {\r\n            duplicateIds.push(entry1.id);\r\n        }\r\n    });\r\n    return duplicateIds;\r\n};\r\n\r\n// Forks. Duplicate Domains with different Ranges: Two rows in the dictionary map to different values\r\nconst findForks = entries => {\r\n    const forkedIds = [];\r\n\r\n    entries.forEach(entry1 => {\r\n        const [domain1, range1] = getSanitizedPair(entry1);\r\n\r\n        const foundFork = entries.some(entry2 => {\r\n            const [domain2, range2] = getSanitizedPair(entry2);\r\n            return entry1.id !== entry2.id && domain1 === domain2 && range1 !== range2;\r\n        });\r\n\r\n        if (foundFork) {\r\n            forkedIds.push(entry1.id);\r\n        }\r\n    });\r\n    return forkedIds;\r\n};\r\n\r\n// Cycles. Two or more rows in a dictionary result in cycles, resulting in a never-ending transformation\r\n// It seems to work most of the time, sometime it doesn't mark all the entries that are part of the cycle only last one\r\nconst findCycle = (entriesHashed, initialId, currentId, depth, maxDepth) => {\r\n    const currentRange = currentId ? entriesHashed[currentId].range : null;\r\n\r\n    if (currentRange === entriesHashed[initialId].domain) {\r\n        // cycle was found\r\n        return true;\r\n    } else if (currentRange === undefined || depth >= maxDepth) {\r\n        // no cycle was found\r\n        return false;\r\n    } else {\r\n        // going deeper\r\n        const ids = Object.keys(entriesHashed);\r\n        const newCurrentId = ids.find(id => currentId !== id && entriesHashed[id].domain === currentRange);\r\n        return findCycle(entriesHashed, initialId, newCurrentId, depth + 1, maxDepth);\r\n    }\r\n};\r\n\r\nconst findCycles = entries => {\r\n    const cycleIds = [];\r\n    const entryIds = entries.map(entry => entry.id);\r\n    const entriesHashed = entries.reduce((acc, cur) => ({ ...acc, [cur.id]: cur }), {});\r\n\r\n    entryIds.forEach(id => {\r\n        if (findCycle(entriesHashed, id, id, 1, entries.length)) {\r\n            cycleIds.push(id);\r\n        }\r\n    });\r\n\r\n    return cycleIds;\r\n};\r\n\r\n// Chains. A chain structure in the dictionary (a value in Range column also appears in Domain column of another entry)\r\nconst findChains = entries => {\r\n    const chainIds = [];\r\n\r\n    // a bit of brute force\r\n    for (let i = 0; i < entries.length; i++) {\r\n        const [domain1, range1] = getSanitizedPair(entries[i]);\r\n        for (let y = 0; y < entries.length; y++) {\r\n            if (i === y) {\r\n                continue;\r\n            }\r\n            const [domain2, range2] = getSanitizedPair(entries[y]);\r\n            if ((domain1 === range2 && domain2 !== range1) || (range1 === domain2 && range2 !== domain1)) {\r\n                chainIds.push(entries[i].id);\r\n            }\r\n        }\r\n    }\r\n    return chainIds;\r\n};\r\n\r\n/**\r\n * Helper function that checks all entries for consistency and returns a hashtable with the results\r\n * @param {array} entries an array of entries\r\n * @returns {object} an object with the entryId as key and a sub-object with properties duplicate, fork, chain and cycle set to true or false\r\n */\r\nexport const getEntryErrorTable = entries => {\r\n    const entryErrorTable = {};\r\n\r\n    // duplicates\r\n    findDuplicates(entries).forEach(id => {\r\n        if (!entryErrorTable[id]) {\r\n            entryErrorTable[id] = {};\r\n        }\r\n        entryErrorTable[id].duplicate = true;\r\n    });\r\n\r\n    // forks\r\n    findForks(entries).forEach(id => {\r\n        if (!entryErrorTable[id]) {\r\n            entryErrorTable[id] = {};\r\n        }\r\n        entryErrorTable[id].fork = true;\r\n    });\r\n\r\n    // cycles\r\n    findCycles(entries).forEach(id => {\r\n        if (!entryErrorTable[id]) {\r\n            entryErrorTable[id] = {};\r\n        }\r\n        entryErrorTable[id].cycle = true;\r\n    });\r\n\r\n    // chains\r\n    findChains(entries).forEach(id => {\r\n        if (!entryErrorTable[id]) {\r\n            entryErrorTable[id] = {};\r\n        }\r\n        entryErrorTable[id].chain = true;\r\n    });\r\n\r\n    return entryErrorTable;\r\n};\r\n","import React from 'react';\r\nimport styles from './ValidityTag.module.scss';\r\n\r\nconst ValidityTag = ({ dict }) => {\r\n    const { validated, numErrors } = dict;\r\n\r\n    // 1: validated and no errors found, 2: not validated yet, 3:  validation fail some errors found\r\n    const renderInvalidTag = dict => {\r\n        if (validated) {\r\n            return <span className={`${styles.valid} ${styles.base}`}>validated</span>;\r\n        } else if (!validated && numErrors === 0) {\r\n            return <span className={`${styles.unchecked} ${styles.base}`}>not validated yet</span>;\r\n        } else {\r\n            const singular = numErrors === 1;\r\n            return (\r\n                <span className={`${styles.error} ${styles.base}`}>\r\n                    <span>{numErrors}</span>\r\n                    <span> {singular ? 'Error' : 'Errors'}</span>\r\n                </span>\r\n            );\r\n        }\r\n    };\r\n\r\n    return <>{renderInvalidTag(dict)}</>;\r\n};\r\n\r\nexport default ValidityTag;\r\n","import React from 'react';\r\nimport styles from './GenericCard.module.scss';\r\n\r\nconst GenericCard = ({ children }) => {\r\n    return <div className={styles.card}>{children}</div>;\r\n};\r\n\r\nGenericCard.Content = ({ children }) => <div className={styles.content}>{children}</div>;\r\n\r\nexport default GenericCard;\r\n","import React from 'react';\r\nimport styles from './DictionaryCard.module.scss';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport ValidityTag from './ValidityTag/ValidityTag';\r\nimport GenericCard from '../../GenericCard/GenericCard';\r\nimport { connect } from 'react-redux';\r\nimport { objToArrOrdered } from '../../../helpers';\r\n\r\nimport { removeDictionary, setEntryErrorFlags, updateDictionary } from '../../../store/actions';\r\n\r\nconst DictionaryCard = ({ dict, removeDictionary }) => {\r\n    const { name, id, entryIds, edited } = dict;\r\n    const lastEditText = moment(edited).fromNow();\r\n\r\n    const handleDelete = evt => {\r\n        evt.preventDefault();\r\n        removeDictionary(dict);\r\n    };\r\n\r\n    return (\r\n        <GenericCard style={{ position: 'relative' }}>\r\n            <GenericCard.Content>\r\n                <Link to={`dict/${id}`} style={{ position: 'absolute', left: 0, right: 0, top: 0, bottom: 0 }}></Link>\r\n\r\n                <div className={styles.flexWrap}>\r\n                    <div>\r\n                        <div className={styles.name}>{name}</div>\r\n                        <div className={styles.meta}>\r\n                            <span className={styles.mdot}>{`${entryIds.length} entries`}</span>\r\n                            <span className={styles.mdot}>{`edited ${lastEditText}`}</span>\r\n                            <ValidityTag dict={dict} />\r\n                        </div>\r\n                    </div>\r\n                    <button className={`${styles.btn} ${styles.btnValidate}`} title='validate Dictionary'>\r\n                        <i className='fas fa-arrow-down'> </i>\r\n                    </button>\r\n                    <button\r\n                        className={`${styles.btn} ${styles.btnDelete}`}\r\n                        title='delete Dictionary'\r\n                        onClick={handleDelete}>\r\n                        <i className='far fa-trash-alt'> </i>\r\n                    </button>\r\n                </div>\r\n            </GenericCard.Content>\r\n        </GenericCard>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    // const currentDict = state.dictionaries[ownProps.match.params.id];\r\n\r\n    return {\r\n        // currentDictionary: currentDict,\r\n        entries: ownProps.dict ? objToArrOrdered(state.entries, ownProps.dict.entryIds) : []\r\n    };\r\n};\r\n\r\nexport default withRouter(\r\n    connect(\r\n        mapStateToProps,\r\n        { removeDictionary, updateDictionary, setEntryErrorFlags }\r\n    )(DictionaryCard)\r\n);\r\n","import React, { useState } from 'react';\r\nimport styles from './DictionaryForm.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { addDictionary } from '../../../store/actions/index';\r\nimport uuid from 'uuid';\r\n\r\nconst DictionaryForm = ({ dictionaries, addDictionary }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChange = evt => setInputValue(evt.target.value);\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        if (isFormValid()) {\r\n            const now = Date.now();\r\n            const newDict = {\r\n                name: inputValue,\r\n                id: uuid(),\r\n                created: now,\r\n                edited: now,\r\n                validated: false,\r\n                numErrors: 0,\r\n                entryIds: []\r\n            };\r\n\r\n            addDictionary(newDict);\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    const isFormValid = () => inputValue.length !== 0;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n            <input\r\n                aria-label={'new dictionary name'}\r\n                maxLength={20}\r\n                type='text'\r\n                value={inputValue}\r\n                placeholder='new Dictionary Name'\r\n                onChange={handleChange}\r\n                name='name'\r\n                className={styles.nameInput}\r\n            />\r\n            <button type='submit'>\r\n                <span> Add</span>\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    { addDictionary }\r\n)(DictionaryForm);\r\n","import React from 'react';\r\nimport styles from './ListViewHeader.module.scss';\r\n\r\nconst ListViewHeader = ({ currentDictionary }) => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <h1 className={styles.heading}>{'Dictionaries'}</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default ListViewHeader;\r\n","import React from 'react';\r\nimport styles from './ResponsiveContainer.module.scss';\r\n\r\nconst ResponsiveContainer = ({ children, center }) => (\r\n    <div className={`${styles.container} ${center ? styles.center : ''}`}>{children}</div>\r\n);\r\n\r\nexport default ResponsiveContainer;\r\n","import React from 'react';\r\nimport styles from './DictionaryListView.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { objToArr } from '../../helpers';\r\nimport DictionaryCard from './DictionaryCard/DictionaryCard';\r\nimport DictionaryForm from './DictionaryForm/DictionaryForm';\r\nimport Header from './ListViewHeader/ListViewHeader.js';\r\nimport ResponsiveContainer from '../ResponsiveContainer/ResponsiveContainer.js';\r\n\r\nconst DictionaryListView = ({ dictionaries }) => (\r\n    <div className={styles.container}>\r\n        <Header />\r\n        <ResponsiveContainer center={true}>\r\n            <DictionaryForm />\r\n            {dictionaries && dictionaries.map(dict => <DictionaryCard dict={dict} key={dict.id} />)}\r\n        </ResponsiveContainer>\r\n    </div>\r\n);\r\n\r\nconst mapStateToProps = state => {\r\n    const convertedDicts = objToArr(state.dictionaries);\r\n\r\n    // sorts recently edited dictionaries to be rendered on top     // TODO (bonus) implement sort by name, numEntries, creation\r\n    const sortedDictionaries = convertedDicts.sort((dictA, dictB) => dictB.edited - dictA.edited);\r\n    return {\r\n        dictionaries: sortedDictionaries\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {}\r\n)(DictionaryListView);\r\n","import React, { useState, useRef } from 'react';\r\nimport styles from './NewEntryForm.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { addEntry, addEntryIdToDictionary, clearEntryErrorFlags } from '../../../store/actions/index';\r\nimport uuid from 'uuid';\r\n\r\nconst NewEntryForm = ({ currentDictionary, addEntry, addEntryIdToDictionary, clearEntryErrorFlags }) => {\r\n    const [state, setState] = useState({\r\n        domain: '',\r\n        range: '',\r\n        error: ''\r\n    });\r\n\r\n    const domainInputRef = useRef(null); // used to change focus to domain input after adding an entry\r\n\r\n    const handleChange = evt => setState({ ...state, [evt.target.name]: evt.target.value });\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        if (isFormValid(state)) {\r\n            const now = Date.now();\r\n            const newEntry = {\r\n                domain: state.domain,\r\n                range: state.range,\r\n                id: uuid(),\r\n                created: now,\r\n                edited: now,\r\n                duplicate: false,\r\n                fork: false,\r\n                chain: false,\r\n                cycle: false\r\n            };\r\n\r\n            addEntry(newEntry);\r\n            addEntryIdToDictionary(newEntry.id, currentDictionary.id);\r\n            clearEntryErrorFlags(currentDictionary.entryIds);\r\n            setState({ domain: '', range: '' });\r\n\r\n            // change focus back to domain input\r\n            domainInputRef.current.focus();\r\n        }\r\n    };\r\n\r\n    const isFormValid = ({ domain, range }) => domain && range;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n            <span className={styles.inputContainer}>\r\n                <input\r\n                    type='text'\r\n                    maxLength={20}\r\n                    value={state.domain}\r\n                    placeholder='Domain'\r\n                    onChange={handleChange}\r\n                    name='domain'\r\n                    className={styles.input}\r\n                    ref={domainInputRef}\r\n                />\r\n\r\n                <input\r\n                    type='text'\r\n                    maxLength={20}\r\n                    value={state.range}\r\n                    placeholder='Range'\r\n                    onChange={handleChange}\r\n                    name='range'\r\n                    className={styles.input}\r\n                />\r\n            </span>\r\n            <button type='submit'>\r\n                <span> Add</span>\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const id = ownProps.match.params.id;\r\n    return {\r\n        currentDictionary: state.dictionaries[id]\r\n    };\r\n};\r\n\r\nexport default withRouter(\r\n    connect(\r\n        mapStateToProps,\r\n        { addEntry, addEntryIdToDictionary, clearEntryErrorFlags }\r\n    )(NewEntryForm)\r\n);\r\n","import React from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport styles from './DetailViewHeader.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { objToArrOrdered, getEntryErrorTable } from '../../../helpers';\r\nimport { setEntryErrorFlags, updateDictionary, showNotification } from '../../../store/actions';\r\n\r\nconst DetailViewHeader = ({ currentDictionary, entries, setEntryErrorFlags, updateDictionary, showNotification }) => {\r\n    const handleValidation = evt => {\r\n        const entryErrorTable = getEntryErrorTable(entries);\r\n\r\n        const objEntries = Object.entries(entryErrorTable);\r\n        const edited = Date.now();\r\n\r\n        if (objEntries.length === 0 && entryErrorTable.constructor === Object) {\r\n            // no errors found, set dictionary.validated to true\r\n            updateDictionary({ ...currentDictionary, validated: true, numErrors: 0, edited });\r\n        } else {\r\n            // dispatch actions to set the  error flags of all entries\r\n            showNotification('errors found');\r\n            updateDictionary({ ...currentDictionary, validated: false, numErrors: objEntries.length, edited });\r\n            objEntries.forEach(([entryId, flags]) => {\r\n                setEntryErrorFlags(entryId, flags);\r\n            });\r\n        }\r\n    };\r\n\r\n    const renderValidateButton = dict => {\r\n        if (dict && dict.validated) {\r\n            return <button className={`${styles.btnValidate} ${styles.valid}`}>Validated</button>;\r\n        } else {\r\n            return (\r\n                <button className={styles.btnValidate} onClick={handleValidation}>\r\n                    Validate\r\n                </button>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <header className={styles.header}>\r\n            <Link to='/' className={styles.btnReturn}>\r\n                <i className='fas fa-chevron-left'> </i>\r\n                <span> back</span>\r\n            </Link>\r\n\r\n            <h1 className={styles.dictName}>{currentDictionary ? currentDictionary.name : ''}</h1>\r\n            {renderValidateButton(currentDictionary)}\r\n        </header>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const currentDict = state.dictionaries[ownProps.match.params.id];\r\n\r\n    return {\r\n        currentDictionary: currentDict,\r\n        entries: currentDict ? objToArrOrdered(state.entries, currentDict.entryIds) : []\r\n    };\r\n};\r\n\r\nexport default withRouter(\r\n    connect(\r\n        mapStateToProps,\r\n        { setEntryErrorFlags, updateDictionary, showNotification }\r\n    )(DetailViewHeader)\r\n);\r\n","import React, { useRef } from 'react';\r\nimport styles from './EntryCard.module.scss';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { withRouter } from 'react-router-dom';\r\nimport GenericCard from '../../GenericCard/GenericCard';\r\nimport {\r\n    updateEntry,\r\n    updateDictionary,\r\n    removeEntryIdFromDictionary,\r\n    removeEntry,\r\n    clearEntryErrorFlags\r\n} from '../../../store/actions';\r\n\r\nconst EntryCard = ({\r\n    entry,\r\n    updateEntry,\r\n    currentDictionary,\r\n    updateDictionary,\r\n    removeEntryIdFromDictionary,\r\n    removeEntry,\r\n    clearEntryErrorFlags\r\n}) => {\r\n    const { domain, range, entryId, duplicate, fork, chain, cycle } = entry;\r\n    const flagIcon = 'fas fa-exclamation-triangle';\r\n    const domainInputRef = useRef(null);\r\n    const rangeInputRef = useRef(null);\r\n\r\n    // inputs are uncontrolled but they are reset when you try to update redux values of domain or range while empty\r\n    const resetEmptyInput = evt => {\r\n        if (evt.target.name === 'domain') {\r\n            domainInputRef.current.value = domain;\r\n        } else {\r\n            rangeInputRef.current.value = range;\r\n        }\r\n    };\r\n\r\n    const handleBlur = evt => {\r\n        // update entry redux state when input loses focus\r\n        const { name, value } = evt.target;\r\n        const modified = (value !== domain && name === 'domain') || (value !== range && name === 'range');\r\n\r\n        if (modified) {\r\n            if (value) {\r\n                const edited = Date.now();\r\n                updateEntry({ ...entry, edited, [name]: value });\r\n                updateDictionary({ ...currentDictionary, validated: false, numErrors: 0, edited });\r\n                clearEntryErrorFlags(currentDictionary.entryIds);\r\n            } else {\r\n                resetEmptyInput(evt);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDelete = evt => {\r\n        evt.preventDefault();\r\n        removeEntryIdFromDictionary(entry.id, currentDictionary.id);\r\n        clearEntryErrorFlags(currentDictionary.entryIds);\r\n\r\n        removeEntry(entry);\r\n        // handleValidation();\r\n    };\r\n\r\n    const handleKeyPress = evt => {\r\n        // update redux state when enter pressed while input was in focus\r\n        if (evt.key === 'Enter') {\r\n            evt.target.blur();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <GenericCard>\r\n            <GenericCard.Content>\r\n                <div className={styles.flexWrap}>\r\n                    <input\r\n                        type='text'\r\n                        name='domain'\r\n                        defaultValue={domain}\r\n                        className={styles.entryInput}\r\n                        onKeyPress={handleKeyPress}\r\n                        onBlur={handleBlur}\r\n                        maxLength={20}\r\n                        ref={domainInputRef}\r\n                    />\r\n                    <input\r\n                        type='text'\r\n                        name='range'\r\n                        defaultValue={range}\r\n                        className={styles.entryInput}\r\n                        onKeyPress={handleKeyPress}\r\n                        onBlur={handleBlur}\r\n                        minLength={1}\r\n                        maxLength={20}\r\n                        ref={rangeInputRef}\r\n                    />\r\n                    <div className={styles.flags}>\r\n                        <i\r\n                            className={`${flagIcon} ${styles.warning} ${duplicate ? '' : styles.hidden}`}\r\n                            title='Duplicate: identical Domain/Range pair already exists'\r\n                        />\r\n                        <i\r\n                            className={`${flagIcon} ${styles.error} ${fork ? '' : styles.hidden}`}\r\n                            title='Fork: The Domain is already in use'\r\n                        />\r\n                        <i\r\n                            className={`${flagIcon} ${styles.error} ${chain ? '' : styles.hidden}`}\r\n                            title='Chain: the Range is already a Domain in another row'\r\n                        />\r\n                        <i\r\n                            className={`${flagIcon} ${styles.severeError} ${cycle ? '' : styles.hidden}`}\r\n                            title='Cycle: Infinite loop detected'\r\n                        />\r\n                    </div>\r\n\r\n                    <button className={styles.btnDelete} onClick={handleDelete}>\r\n                        <i className='far fa-trash-alt'> </i>\r\n                    </button>\r\n                </div>\r\n            </GenericCard.Content>\r\n        </GenericCard>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    currentDictionary: state.dictionaries[ownProps.match.params.id]\r\n});\r\n\r\nexport default withRouter(\r\n    connect(\r\n        mapStateToProps,\r\n        { updateEntry, updateDictionary, removeEntryIdFromDictionary, removeEntry, clearEntryErrorFlags }\r\n    )(EntryCard)\r\n);\r\n","import React, { useEffect } from 'react';\r\nimport styles from './Entries.module.scss';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { objToArrOrdered } from '../../../helpers';\r\n\r\nimport { connect } from 'react-redux';\r\nimport EntryCard from '../EntryCard/EntryCard';\r\n\r\nconst Entries = ({ entries }) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            {entries.length ? (\r\n                entries.map(entry => <EntryCard key={entry.id} entry={entry} />)\r\n            ) : (\r\n                <span>empty dictionary</span>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const currentDict = state.dictionaries[ownProps.match.params.id];\r\n    return {\r\n        entries: currentDict ? objToArrOrdered(state.entries, currentDict.entryIds) : [],\r\n        currentDictionary: currentDict\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(Entries));\r\n","import React, { useEffect } from 'react';\r\nimport styles from './DictionaryDetailView.module.scss';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport NewEntryForm from './NewEntryForm/NewEntryForm.js';\r\nimport Header from './DetailViewHeader/DetailViewHeader.js';\r\nimport Entries from './Entries/Entries';\r\nimport ResponsiveContainer from '../ResponsiveContainer/ResponsiveContainer.js';\r\n\r\nconst DictionaryDetailView = ({ currentDictionary, history }) => {\r\n    useEffect(() => {\r\n        // redirect to homepage if currentDictionary invalid\r\n        if (!currentDictionary) {\r\n            history.push('/');\r\n        }\r\n    }, [currentDictionary]);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Header />\r\n            <ResponsiveContainer center={true}>\r\n                <NewEntryForm />\r\n                <Entries />\r\n            </ResponsiveContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const id = ownProps.match.params.id;\r\n    return {\r\n        currentDictionary: state.dictionaries[id]\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(DictionaryDetailView));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { store } from './store';\nimport App from './components/App';\nimport DictionaryListView from './components/DictionaryListView/DictionaryListView';\nimport DictionaryDetailView from './components/.DictionaryDetailView/DictionaryDetailView';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Switch basename={process.env.PUBLIC_URL}>\n                <App>\n                    <Route path='/' exact component={DictionaryListView} />\n                    <Route path='/dict/:id' component={DictionaryDetailView} />\n                </App>\n            </Switch>\n        </Router>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}