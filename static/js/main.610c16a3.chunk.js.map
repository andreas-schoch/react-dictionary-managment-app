{"version":3,"sources":["components/.DictionaryDetailView/EntryCard/EntryCard.module.scss","components/DictionaryListView/DictionaryCard/DictionaryCard.module.scss","components/DictionaryListView/DictionaryCard/ValidityTag/ValidityTag.module.scss","components/.DictionaryDetailView/DetailViewHeader/DetailViewHeader.module.scss","components/.DictionaryDetailView/NewEntryForm/NewEntryForm.module.scss","components/App.module.scss","components/GenericCard/GenericCard.module.scss","components/DictionaryListView/DictionaryForm/DictionaryForm.module.scss","components/DictionaryListView/ListViewHeader/ListViewHeader.module.scss","components/ResponsiveContainer/ResponsiveContainer.module.scss","components/Footer/Footer.module.scss","components/DictionaryListView/DictionaryListView.module.scss","components/.DictionaryDetailView/DictionaryDetailView.module.scss","serviceWorker.js","store/reducers/entryReducer.js","store/reducers/dictionaryReducer.js","store/reducers/index.js","store/actions/types.js","store/index.js","components/Footer/Footer.js","components/App.js","helpers/index.js","components/DictionaryListView/DictionaryCard/ValidityTag/ValidityTag.js","components/GenericCard/GenericCard.js","store/actions/index.js","components/DictionaryListView/DictionaryCard/DictionaryCard.js","components/DictionaryListView/DictionaryForm/DictionaryForm.js","components/DictionaryListView/ListViewHeader/ListViewHeader.js","components/ResponsiveContainer/ResponsiveContainer.js","components/DictionaryListView/DictionaryListView.js","components/.DictionaryDetailView/NewEntryForm/NewEntryForm.js","components/.DictionaryDetailView/DetailViewHeader/DetailViewHeader.js","components/.DictionaryDetailView/EntryCard/EntryCard.js","components/.DictionaryDetailView/Entries/Entries.js","components/.DictionaryDetailView/DictionaryDetailView.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","persistedState","localStorage","getItem","JSON","parse","entries","timestamp","Date","now","id1","uuid","id2","id3","initial","name","id","created","edited","numErrors","validated","entryIds","dictionaries","rootReducer","combineReducers","action","type","entry","payload","newEntry","updatedEntry","copy","Object","assign","removedEntry","entryId","flags","clearedEntries","forEach","duplicate","fork","cycle","chain","dict","newDictionary","updatedDict","updatedDictionary","removedDictionary","dictId","concat","index","indexOf","splice","store","createStore","composeWithDevTools","subscribe","setItem","stringify","getState","Footer","className","styles","mainFooter","href","target","rel","title","App","props","contentWrapper","mainContent","children","objToArrOrdered","hashtable","keys","length","arr","i","current","push","getSanitizedPair","domain","range","trim","toLowerCase","ValidityTag","valid","base","singular","error","unchecked","renderInvalidTag","GenericCard","card","Content","content","updateDictionary","connect","removeDictionary","lastEditText","moment","fromNow","to","flexWrap","meta","mdot","btn","btnValidate","btnDelete","onClick","evt","preventDefault","addDictionary","useState","inputValue","setInputValue","isFormValid","onSubmit","newDict","form","aria-label","maxLength","value","placeholder","onChange","nameInput","ListViewHeader","currentDictionary","header","heading","ResponsiveContainer","center","container","state","values","map","item","sort","dictA","dictB","key","withRouter","ownProps","params","addEntry","addEntryIdToDictionary","setState","handleChange","inputContainer","input","currentDict","setEntryErrorFlags","handleValidation","entryErrorTable","uniqueSet","Set","duplicateIds","has","add","findDuplicates","forkedIds","findForks","cycledIds","findCycles","chainIds","findChains","objEntries","constructor","btnReturn","dictName","updateEntry","removeEntryIdFromDictionary","removeEntry","clearEntryErrorFlags","entryModified","setEntryModified","flagClass","handleBlur","handleKeyPress","blur","entryInput","defaultValue","onKeyPress","onBlur","warning","hidden","severeError","history","useEffect","ReactDOM","render","path","exact","component","DictionaryListView","DictionaryDetailView","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.610c16a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexWrap\":\"EntryCard_flexWrap__1OWc_\",\"entryInput\":\"EntryCard_entryInput__1r3IS\",\"btnDelete\":\"EntryCard_btnDelete__GSQLY\",\"flags\":\"EntryCard_flags__EzYly\",\"warning\":\"EntryCard_warning__1NSMv\",\"error\":\"EntryCard_error__10mDl\",\"severeError\":\"EntryCard_severeError__3U50y\",\"hidden\":\"EntryCard_hidden__2cFME\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"DictionaryCard_name__3MHt3\",\"meta\":\"DictionaryCard_meta__1L3VC\",\"mdot\":\"DictionaryCard_mdot__2tYfu\",\"flexWrap\":\"DictionaryCard_flexWrap__22Nsu\",\"btn\":\"DictionaryCard_btn__3n0dX\",\"btnDelete\":\"DictionaryCard_btnDelete__25J0G\",\"btnValidate\":\"DictionaryCard_btnValidate__CClU0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"base\":\"ValidityTag_base__kNfMh\",\"valid\":\"ValidityTag_valid__2Chfx\",\"error\":\"ValidityTag_error__uwrT1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"DetailViewHeader_header__3sLDz\",\"btnReturn\":\"DetailViewHeader_btnReturn__36lUY\",\"btnValidate\":\"DetailViewHeader_btnValidate__SxmGX\",\"valid\":\"DetailViewHeader_valid__3kB_j\",\"dictName\":\"DetailViewHeader_dictName__tnNvN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewEntryForm_form__2YDzS\",\"inputContainer\":\"NewEntryForm_inputContainer__1QeOp\",\"input\":\"NewEntryForm_input__2Aa2q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentWrapper\":\"App_contentWrapper__ukNqe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"GenericCard_card__3pykX\",\"content\":\"GenericCard_content__BOdCL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"DictionaryForm_form__hWCNE\",\"nameInput\":\"DictionaryForm_nameInput__1_otS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"ListViewHeader_header__3Lsp5\",\"btnReturn\":\"ListViewHeader_btnReturn__2fEMa\",\"heading\":\"ListViewHeader_heading__1Y4r9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ResponsiveContainer_container__POb4b\",\"center\":\"ResponsiveContainer_center__2gkar\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainFooter\":\"Footer_mainFooter__3n9E-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DictionaryListView_container__YZCXG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DictionaryDetailView_container__2lHL2\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/types';\r\n\r\nconst initial = {};\r\n\r\n// look for data in localStorage\r\nconst persistedState = localStorage.getItem('dictApp') ? JSON.parse(localStorage.getItem('dictApp')).entries : initial;\r\n\r\nexport const entryReducer = (entries = persistedState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_ENTRY: {\r\n            const entry = action.payload.newEntry;\r\n            return { ...entries, [entry.id]: entry };\r\n        }\r\n        case actionTypes.UPDATE_ENTRY: {\r\n            const entry = action.payload.updatedEntry;\r\n            return { ...entries, [entry.id]: entry };\r\n        }\r\n\r\n        case actionTypes.REMOVE_ENTRY: {\r\n            const copy = Object.assign({}, { ...entries });\r\n            delete copy[action.payload.removedEntry.id];\r\n            return copy;\r\n        }\r\n\r\n        case actionTypes.SET_ENTRY_ERROR_FLAGS: {\r\n            let { entryId, flags } = action.payload;\r\n            const entry = { ...entries[entryId], ...flags };\r\n            return { ...entries, [entry.id]: entry };\r\n        }\r\n\r\n        case actionTypes.CLEAR_ENTRY_ERROR_FLAGS: {\r\n            let entryIds = action.payload.entryIds;\r\n            let clearedEntries = {};\r\n            entryIds.forEach(id => {\r\n                clearedEntries[id] = { ...entries[id], duplicate: false, fork: false, cycle: false, chain: false };\r\n            });\r\n            return { ...entries, ...clearedEntries };\r\n        }\r\n\r\n        default:\r\n            return entries;\r\n    }\r\n};\r\n","import * as actionTypes from '../actions/types';\r\nimport uuid from 'uuid';\r\n\r\nconst timestamp = Date.now(),\r\n    id1 = uuid(),\r\n    id2 = uuid(),\r\n    id3 = uuid();\r\n\r\nconst initial = {\r\n    [id1]: {\r\n        name: 'My Dictionary 1',\r\n        id: id1,\r\n        created: timestamp - 3,\r\n        edited: timestamp - 3,\r\n        numErrors: 0,\r\n        validated: false,\r\n        entryIds: []\r\n    },\r\n    [id2]: {\r\n        name: 'My Dictionary 2',\r\n        id: id2,\r\n        created: timestamp - 2,\r\n        edited: timestamp - 2,\r\n        numErrors: 0,\r\n        validated: false,\r\n        entryIds: []\r\n    },\r\n    [id3]: {\r\n        name: 'My Dictionary 3',\r\n        id: id3,\r\n        created: timestamp - 1,\r\n        edited: timestamp - 1,\r\n        numErrors: 0,\r\n        validated: false,\r\n        entryIds: []\r\n    }\r\n};\r\n\r\n// look for data in localStorage\r\nconst persistedState = localStorage.getItem('dictApp')\r\n    ? JSON.parse(localStorage.getItem('dictApp')).dictionaries\r\n    : initial;\r\n\r\nexport const dictionaryReducer = (dictionaries = persistedState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_DICTIONARY: {\r\n            const dict = action.payload.newDictionary;\r\n            return { ...dictionaries, ...{ [dict.id]: dict } };\r\n        }\r\n        case actionTypes.UPDATE_DICTIONARY: {\r\n            const updatedDict = action.payload.updatedDictionary;\r\n            return { ...dictionaries, [updatedDict.id]: updatedDict };\r\n        }\r\n        case actionTypes.REMOVE_DICTIONARY: {\r\n            const copy = Object.assign({}, { ...dictionaries });\r\n            delete copy[action.payload.removedDictionary.id];\r\n            return copy;\r\n        }\r\n        case actionTypes.ADD_ENTRY_ID_TO_DICTIONARY: {\r\n            const { entryId, dictId } = action.payload;\r\n            const edited = Date.now();\r\n            const entryIds = dictionaries[dictId].entryIds.concat(entryId);\r\n            return {\r\n                ...dictionaries,\r\n                [dictId]: { ...dictionaries[dictId], edited, entryIds, validated: false, numErrors: 0 }\r\n            };\r\n        }\r\n        case actionTypes.REMOVE_ENTRY_ID_FROM_DICTIONARY: {\r\n            const { entryId, dictId } = action.payload;\r\n            const edited = Date.now();\r\n            const entryIds = [...dictionaries[dictId].entryIds];\r\n            const index = entryIds.indexOf(entryId);\r\n            entryIds.splice(index, 1);\r\n            return { ...dictionaries, [dictId]: { ...dictionaries[dictId], edited, entryIds } };\r\n        }\r\n        default:\r\n            return dictionaries;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { entryReducer } from './entryReducer';\r\nimport { dictionaryReducer } from './dictionaryReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    entries: entryReducer,\r\n    dictionaries: dictionaryReducer\r\n});\r\n","// Entry Action Types (An entry is a key/value pair inside a dictionary)\r\nexport const ADD_ENTRY = 'ADD_ENTRY';\r\nexport const UPDATE_ENTRY = 'UPDATE_ENTRY';\r\nexport const REMOVE_ENTRY = 'REMOVE_ENTRY';\r\nexport const SET_ENTRY_ERROR_FLAGS = 'SET_ENTRY_ERROR_FLAGS';\r\nexport const CLEAR_ENTRY_ERROR_FLAGS = 'CLEAR_ENTRY_ERROR_FLAGS';\r\n\r\n// Dictionary Action Types\r\nexport const ADD_DICTIONARY = 'ADD_DICTIONARY';\r\nexport const UPDATE_DICTIONARY = 'RENAME_DICTIONARY';\r\nexport const REMOVE_DICTIONARY = 'REMOVE_DICTIONARY';\r\nexport const ADD_ENTRY_ID_TO_DICTIONARY = 'ADD_ENTRY_ID_TO_DICTIONARY';\r\nexport const REMOVE_ENTRY_ID_FROM_DICTIONARY = 'REMOVE_ENTRY_ID_FROM_DICTIONARY';\r\n","import { createStore } from 'redux';\r\nimport { rootReducer } from './reducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// save state in local storage on every state change\r\nstore.subscribe(() => localStorage.setItem('dictApp', JSON.stringify(store.getState())));\r\n","import React from 'react';\r\nimport styles from './Footer.module.scss';\r\n\r\nconst Footer = () => (\r\n    <footer className={styles.mainFooter}>\r\n        <a\r\n            href='https://github.com/andreas-schoch/react-dictionary-managment-app'\r\n            target='_blank'\r\n            rel='noopener noreferrer'\r\n            title='Source Code'>\r\n            <i className='fab fa-github'> </i>\r\n            <span> Source Code</span>\r\n        </a>\r\n    </footer>\r\n);\r\nexport default Footer;\r\n","import React from 'react';\nimport styles from './App.module.scss';\nimport Footer from './Footer/Footer';\n\nconst App = props => {\n    return (\n        <div className={styles.contentWrapper}>\n            <span className={styles.mainContent}>{props.children}</span>\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;\n","/**\r\n * transforms a Hashtable (object containing sub-objects) into an Array of Objects\r\n * @param {Object} hashtable an Object of Sub-Objects\r\n * @returns An Array of Objects\r\n */\r\nexport const objToArr = hashtable => Object.values(hashtable).map(item => item);\r\n\r\n/**\r\n * get certain parts of a Hashtable by providing the keys you are interested in and transforming the partialHashtable into an Array\r\n * @param {Object} hashtable Object of Sub-Objects\r\n * @param {Array} keys an Array of keys (a key equals a sub-objects id property)\r\n * @returns An Array of Objects\r\n */\r\nexport const objToArrOrdered = (hashtable, keys) => {\r\n    // (intentionally not using functional style here for performance reasons)\r\n    const length = keys.length;\r\n    const arr = [];\r\n    for (let i = 0; i < length; i++) {\r\n        const currentId = keys[i];\r\n\r\n        // check if currentId exists and push the value\r\n        const current = hashtable[currentId];\r\n        if (current) {\r\n            arr.push(current);\r\n        }\r\n    }\r\n    return arr;\r\n};\r\n\r\n/**\r\n * get certain parts of a Hashtable by providing the keys you are interested in\r\n * @param {Object} hashtable Object of Sub-Objects\r\n * @param {Array} keys an Array of keys (a key equals a sub-objects id property)\r\n * @returns A Hashtable with all the Sub-Objects of interest\r\n */\r\nexport const objToObjOrdered = (hashtable, keys) => {\r\n    // (intentionally not using functional style here for performance reasons)\r\n    const partialHashtable = {};\r\n\r\n    const length = keys.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const currentId = keys[i];\r\n\r\n        // check if currentId exists and push the value\r\n        const current = hashtable[currentId];\r\n        if (current) {\r\n            partialHashtable[currentId] = current;\r\n        }\r\n    }\r\n    return partialHashtable;\r\n};\r\n\r\n// modifies entry domain/range pair for the comparison\r\nconst getSanitizedPair = (domain, range) => [domain.trim().toLowerCase(), range.trim().toLowerCase()];\r\n\r\n// TODO try to combine all 4 helper functions in single iteration, if performance ever becomes an issue here\r\n// Duplicates. Duplicate Domain - Range pairs: Two rows in the dictionary map to the same value\r\nexport const findDuplicates = entries => {\r\n    const uniqueSet = new Set();\r\n    const duplicateIds = [];\r\n\r\n    entries.forEach((entry, i) => {\r\n        const [domain, range] = getSanitizedPair(entry.domain, entry.range);\r\n        uniqueSet.has(domain + range) ? duplicateIds.push(entry.id) : uniqueSet.add(domain + range);\r\n    });\r\n    return duplicateIds;\r\n};\r\n\r\n// Forks. Duplicate Domains with different Ranges: Two rows in the dictionary map to different values\r\nexport const findForks = entries => {\r\n    const uniqueSet = new Set();\r\n    const forkedIds = [];\r\n\r\n    entries.forEach(entry => {\r\n        const [domain] = getSanitizedPair(entry.domain, entry.range);\r\n        uniqueSet.has(domain) ? forkedIds.push(entry.id) : uniqueSet.add(domain);\r\n    });\r\n    return forkedIds;\r\n};\r\n\r\n// Cycles. Two or more rows in a dictionary result in cycles, resulting in a never-ending transformation\r\nexport const findCycles = entries => {\r\n    const uniqueSet = new Set();\r\n    const cycledIds = [];\r\n\r\n    entries.forEach(entry => {\r\n        const [domain, range] = getSanitizedPair(entry.domain, entry.range);\r\n        uniqueSet.has(domain + range) ? cycledIds.push(entry.id) : uniqueSet.add(range + domain);\r\n    });\r\n    return cycledIds;\r\n};\r\n\r\n// Chains. A chain structure in the dictionary (a value in Range column also appears in Domain column of another entry)\r\nexport const findChains = entries => {\r\n    const uniqueSet = new Set();\r\n    const chainIds = [];\r\n\r\n    entries.forEach(entry => {\r\n        const [domain, range] = getSanitizedPair(entry.domain, entry.range);\r\n        uniqueSet.has(range) ? chainIds.push(entry.id) : uniqueSet.add(domain);\r\n    });\r\n    return chainIds;\r\n};\r\n","import React from 'react';\r\nimport styles from './ValidityTag.module.scss';\r\n\r\nconst ValidityTag = ({ dict }) => {\r\n    const { validated, numErrors } = dict;\r\n\r\n    // 1: validated and no errors found, 2: not validated yet, 3:  validation fail some errors found\r\n    const renderInvalidTag = dict => {\r\n        if (validated) {\r\n            return <span className={`${styles.valid} ${styles.base}`}>validated</span>;\r\n        } else if (!validated && numErrors === 0) {\r\n            return <span className={`${styles.unchecked} ${styles.base}`}>not validated yet</span>;\r\n        } else {\r\n            const singular = numErrors === 1;\r\n            return (\r\n                <span className={`${styles.error} ${styles.base}`}>\r\n                    <span>{numErrors}</span>\r\n                    <span> {singular ? 'Error' : 'Errors'}</span>\r\n                </span>\r\n            );\r\n        }\r\n    };\r\n\r\n    return <>{renderInvalidTag(dict)}</>;\r\n};\r\n\r\nexport default ValidityTag;\r\n","import React from 'react';\r\nimport styles from './GenericCard.module.scss';\r\n\r\nconst GenericCard = ({ children }) => {\r\n    return <div className={styles.card}>{children}</div>;\r\n};\r\n\r\nGenericCard.Content = ({ children }) => <div className={styles.content}>{children}</div>;\r\n\r\nexport default GenericCard;\r\n","import * as actionTypes from './types';\r\n\r\n// Entry Actions\r\nexport const addEntry = newEntry => ({\r\n    type: actionTypes.ADD_ENTRY,\r\n    payload: { newEntry }\r\n});\r\n\r\nexport const updateEntry = updatedEntry => ({\r\n    type: actionTypes.UPDATE_ENTRY,\r\n    payload: { updatedEntry }\r\n});\r\n\r\nexport const removeEntry = removedEntry => ({\r\n    type: actionTypes.REMOVE_ENTRY,\r\n    payload: { removedEntry }\r\n});\r\n\r\nexport const setEntryErrorFlags = (entryId, flags) => ({\r\n    type: actionTypes.SET_ENTRY_ERROR_FLAGS,\r\n    payload: { entryId, flags }\r\n});\r\n\r\nexport const clearEntryErrorFlags = entryIds => ({\r\n    type: actionTypes.CLEAR_ENTRY_ERROR_FLAGS,\r\n    payload: { entryIds }\r\n});\r\n\r\n// Dictionary Actions\r\nexport const addDictionary = newDictionary => ({\r\n    type: actionTypes.ADD_DICTIONARY,\r\n    payload: { newDictionary }\r\n});\r\n\r\nexport const updateDictionary = updatedDictionary => ({\r\n    type: actionTypes.UPDATE_DICTIONARY,\r\n    payload: { updatedDictionary }\r\n});\r\n\r\nexport const removeDictionary = removedDictionary => ({\r\n    type: actionTypes.REMOVE_DICTIONARY,\r\n    payload: { removedDictionary }\r\n});\r\n\r\nexport const addEntryIdToDictionary = (entryId, dictId) => ({\r\n    type: actionTypes.ADD_ENTRY_ID_TO_DICTIONARY,\r\n    payload: { entryId, dictId }\r\n});\r\n\r\nexport const removeEntryIdFromDictionary = (entryId, dictId) => ({\r\n    type: actionTypes.REMOVE_ENTRY_ID_FROM_DICTIONARY,\r\n    payload: { entryId, dictId }\r\n});\r\n","import React from 'react';\r\nimport styles from './DictionaryCard.module.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport ValidityTag from './ValidityTag/ValidityTag';\r\nimport GenericCard from '../../GenericCard/GenericCard';\r\nimport { connect } from 'react-redux';\r\nimport { removeDictionary } from '../../../store/actions';\r\n\r\nconst DictionaryCard = ({ dict, removeDictionary }) => {\r\n    const { name, id, entryIds, edited } = dict;\r\n    const lastEditText = moment(edited).fromNow();\r\n\r\n    const handleDelete = evt => {\r\n        evt.preventDefault();\r\n        removeDictionary(dict);\r\n    };\r\n\r\n    return (\r\n        <GenericCard>\r\n            <Link to={`dict/${id}`}>\r\n                <GenericCard.Content>\r\n                    <div className={styles.flexWrap}>\r\n                        <div>\r\n                            <div className={styles.name}>{name}</div>\r\n                            <div className={styles.meta}>\r\n                                <span className={styles.mdot}>{`${entryIds.length} entries`}</span>\r\n                                <span className={styles.mdot}>{`edited ${lastEditText}`}</span>\r\n                                <ValidityTag dict={dict} />\r\n                            </div>\r\n                        </div>\r\n                        <button className={`${styles.btn} ${styles.btnValidate}`} title='validate Dictionary'>\r\n                            <i className='fas fa-check'> </i>\r\n                        </button>\r\n                        <button\r\n                            className={`${styles.btn} ${styles.btnDelete}`}\r\n                            title='delete Dictionary'\r\n                            onClick={handleDelete}>\r\n                            <i className='far fa-trash-alt'> </i>\r\n                        </button>\r\n                    </div>\r\n                </GenericCard.Content>\r\n            </Link>\r\n        </GenericCard>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    { removeDictionary }\r\n)(DictionaryCard);\r\n","import React, { useState } from 'react';\r\nimport styles from './DictionaryForm.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { addDictionary } from '../../../store/actions/index';\r\nimport uuid from 'uuid';\r\n\r\nconst DictionaryForm = ({ dictionaries, addDictionary }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChange = evt => setInputValue(evt.target.value);\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        if (isFormValid()) {\r\n            const now = Date.now();\r\n            const newDict = {\r\n                name: inputValue,\r\n                id: uuid(),\r\n                created: now,\r\n                edited: now,\r\n                validated: false,\r\n                numErrors: 0,\r\n                entryIds: []\r\n            };\r\n\r\n            addDictionary(newDict);\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    const isFormValid = () => inputValue.length !== 0;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n            <input\r\n                aria-label={'new dictionary name'}\r\n                maxLength={20}\r\n                type='text'\r\n                value={inputValue}\r\n                placeholder='new Dictionary Name'\r\n                onChange={handleChange}\r\n                name='name'\r\n                className={styles.nameInput}\r\n            />\r\n            <button type='submit'>\r\n                <span> Add</span>\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    { addDictionary }\r\n)(DictionaryForm);\r\n","import React from 'react';\r\nimport styles from './ListViewHeader.module.scss';\r\n\r\nconst ListViewHeader = ({ currentDictionary }) => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <h1 className={styles.heading}>{'Dictionaries'}</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default ListViewHeader;\r\n","import React from 'react';\r\nimport styles from './ResponsiveContainer.module.scss';\r\n\r\nconst ResponsiveContainer = ({ children, center }) => (\r\n    <div className={`${styles.container} ${center ? styles.center : ''}`}>{children}</div>\r\n);\r\n\r\nexport default ResponsiveContainer;\r\n","import React from 'react';\r\nimport styles from './DictionaryListView.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { objToArr } from '../../helpers';\r\nimport DictionaryCard from './DictionaryCard/DictionaryCard';\r\nimport DictionaryForm from './DictionaryForm/DictionaryForm';\r\nimport Header from './ListViewHeader/ListViewHeader.js';\r\nimport ResponsiveContainer from '../ResponsiveContainer/ResponsiveContainer.js';\r\n\r\nconst DictionaryListView = ({ dictionaries }) => (\r\n    <div className={styles.container}>\r\n        <Header />\r\n        <ResponsiveContainer center={true}>\r\n            <DictionaryForm />\r\n            {dictionaries.map(dict => (\r\n                <DictionaryCard dict={dict} key={dict.id} />\r\n            ))}\r\n        </ResponsiveContainer>\r\n    </div>\r\n);\r\n\r\nconst mapStateToProps = state => {\r\n    const convertedDicts = objToArr(state.dictionaries);\r\n\r\n    // sorts recently edited dictionaries to be rendered on top     // TODO (bonus) implement sort by name, numEntries, creation\r\n    const sortedDictionaries = convertedDicts.sort((dictA, dictB) => dictB.edited - dictA.edited);\r\n    return {\r\n        dictionaries: sortedDictionaries\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {}\r\n)(DictionaryListView);\r\n","import React, { useState } from 'react';\r\nimport styles from './NewEntryForm.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { addEntry, addEntryIdToDictionary } from '../../../store/actions/index';\r\nimport uuid from 'uuid';\r\n\r\nconst NewEntryForm = ({ currentDictionary, addEntry, addEntryIdToDictionary }) => {\r\n    const [state, setState] = useState({\r\n        domain: '',\r\n        range: '',\r\n        error: ''\r\n    });\r\n\r\n    const [error, setError] = useState([]);\r\n\r\n    const handleChange = evt => setState({ ...state, [evt.target.name]: evt.target.value });\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        if (isFormValid(state)) {\r\n            const now = Date.now();\r\n            const newEntry = {\r\n                domain: state.domain,\r\n                range: state.range,\r\n                id: uuid(),\r\n                created: now,\r\n                edited: now,\r\n                duplicate: false,\r\n                fork: false,\r\n                chain: false,\r\n                cycle: false\r\n            };\r\n\r\n            addEntry(newEntry);\r\n            addEntryIdToDictionary(newEntry.id, currentDictionary.id);\r\n            setState({ domain: '', range: '' });\r\n        }\r\n    };\r\n\r\n    const isFormValid = ({ domain, range }) => domain && range;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n            <span className={styles.inputContainer}>\r\n                <input\r\n                    type='text'\r\n                    maxLength={20}\r\n                    value={state.domain}\r\n                    placeholder='Domain'\r\n                    onChange={handleChange}\r\n                    name='domain'\r\n                    className={styles.input}\r\n                />\r\n\r\n                <input\r\n                    type='text'\r\n                    maxLength={20}\r\n                    value={state.range}\r\n                    placeholder='Range'\r\n                    onChange={handleChange}\r\n                    name='range'\r\n                    className={styles.input}\r\n                />\r\n            </span>\r\n            <button type='submit'>\r\n                <span> Add</span>\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const id = ownProps.match.params.id;\r\n    return {\r\n        currentDictionary: state.dictionaries[id]\r\n    };\r\n};\r\n\r\nexport default withRouter(\r\n    connect(\r\n        mapStateToProps,\r\n        { addEntry, addEntryIdToDictionary }\r\n    )(NewEntryForm)\r\n);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport styles from './DetailViewHeader.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { objToArrOrdered, findDuplicates, findForks, findCycles, findChains } from '../../../helpers';\r\nimport { setEntryErrorFlags, updateDictionary } from '../../../store/actions';\r\n\r\nconst DetailViewHeader = ({ currentDictionary, entries, setEntryErrorFlags, updateDictionary }) => {\r\n    const handleValidation = evt => {\r\n        const entryErrorTable = {};\r\n\r\n        // TODO consider refactoring the validation helpers. Right now some part is here and another part is somewhere else\r\n        // duplicates\r\n        findDuplicates(entries).forEach(id => {\r\n            if (!entryErrorTable[id]) {\r\n                entryErrorTable[id] = {};\r\n            }\r\n            entryErrorTable[id].duplicate = true;\r\n        });\r\n\r\n        // forks\r\n        findForks(entries).forEach(id => {\r\n            if (!entryErrorTable[id]) {\r\n                entryErrorTable[id] = {};\r\n            }\r\n            entryErrorTable[id].fork = true;\r\n        });\r\n\r\n        // cycles\r\n        findCycles(entries).forEach(id => {\r\n            if (!entryErrorTable[id]) {\r\n                entryErrorTable[id] = {};\r\n            }\r\n            entryErrorTable[id].cycle = true;\r\n        });\r\n\r\n        // chains\r\n        findChains(entries).forEach(id => {\r\n            if (!entryErrorTable[id]) {\r\n                entryErrorTable[id] = {};\r\n            }\r\n            entryErrorTable[id].chain = true;\r\n        });\r\n\r\n        // dispatch action  to set the  error flags of all entries\r\n        const objEntries = Object.entries(entryErrorTable);\r\n        const edited = Date.now();\r\n\r\n        // set the dictionary.validated to true of no errors found\r\n        if (objEntries.length === 0 && entryErrorTable.constructor === Object) {\r\n            updateDictionary({ ...currentDictionary, validated: true, numErrors: 0, edited });\r\n        } else {\r\n            updateDictionary({ ...currentDictionary, validated: false, numErrors: objEntries.length, edited });\r\n\r\n            objEntries.forEach(([entryId, flags]) => {\r\n                setEntryErrorFlags(entryId, flags);\r\n            });\r\n        }\r\n    };\r\n\r\n    // 1: dict is validated 2: not validated yet 3:  errors found\r\n    const renderValidateButton = dict => {\r\n        if (dict.validated) {\r\n            return <button className={`${styles.btnValidate} ${styles.valid}`}>Validated</button>;\r\n        } else {\r\n            return (\r\n                <button className={styles.btnValidate} onClick={handleValidation}>\r\n                    Validate\r\n                </button>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <header className={styles.header}>\r\n            <Link to='/' className={styles.btnReturn}>\r\n                <i className='fas fa-chevron-left'> </i>\r\n                <span> back</span>\r\n            </Link>\r\n\r\n            <h1 className={styles.dictName}>{currentDictionary ? currentDictionary.name : ''}</h1>\r\n            {renderValidateButton(currentDictionary)}\r\n        </header>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const currentDict = state.dictionaries[ownProps.match.params.id];\r\n\r\n    return {\r\n        currentDictionary: currentDict,\r\n        entries: currentDict ? objToArrOrdered(state.entries, currentDict.entryIds) : []\r\n    };\r\n};\r\n\r\nexport default withRouter(\r\n    connect(\r\n        mapStateToProps,\r\n        { setEntryErrorFlags, updateDictionary }\r\n    )(DetailViewHeader)\r\n);\r\n","import React, { useState } from 'react';\r\nimport styles from './EntryCard.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport GenericCard from '../../GenericCard/GenericCard';\r\nimport {\r\n    updateEntry,\r\n    updateDictionary,\r\n    removeEntryIdFromDictionary,\r\n    removeEntry,\r\n    clearEntryErrorFlags\r\n} from '../../../store/actions';\r\n\r\nconst EntryCard = ({\r\n    entry,\r\n    updateEntry,\r\n    currentDictionary,\r\n    updateDictionary,\r\n    removeEntryIdFromDictionary,\r\n    removeEntry,\r\n    clearEntryErrorFlags\r\n}) => {\r\n    const [entryModified, setEntryModified] = useState(false); // true if data different from redux state\r\n    const { domain, range, entryId, duplicate, fork, chain, cycle } = entry;\r\n    const flagClass = 'fas fa-exclamation-triangle';\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n    };\r\n\r\n    const handleChange = evt => {\r\n        // inputs are uncontrolled, this function only checks if values are different from redux state\r\n        const { name, value } = evt.target;\r\n        if ((value !== domain && name === 'domain') || (value !== range && name === 'range')) {\r\n            setEntryModified(true);\r\n        }\r\n    };\r\n\r\n    const handleBlur = evt => {\r\n        // update redux state when input loses focus\r\n        if (entryModified) {\r\n            const edited = Date.now();\r\n            updateEntry({ ...entry, edited, [evt.target.name]: evt.target.value });\r\n            updateDictionary({ ...currentDictionary, validated: false, numErrors: 0, edited });\r\n            clearEntryErrorFlags(currentDictionary.entryIds);\r\n        }\r\n    };\r\n\r\n    const handleDelete = evt => {\r\n        evt.preventDefault();\r\n        removeEntryIdFromDictionary(entry.id, currentDictionary.id);\r\n        removeEntry(entry);\r\n    };\r\n\r\n    const handleKeyPress = evt => {\r\n        // update redux state when enter pressed while input was in focus\r\n        if (evt.key === 'Enter') {\r\n            evt.target.blur();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <GenericCard>\r\n            <GenericCard.Content>\r\n                <div className={styles.flexWrap}>\r\n                    <input\r\n                        type='text'\r\n                        name='domain'\r\n                        className={styles.entryInput}\r\n                        defaultValue={entry.domain}\r\n                        onKeyPress={handleKeyPress}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                    />\r\n                    <input\r\n                        type='text'\r\n                        name='range'\r\n                        className={styles.entryInput}\r\n                        defaultValue={entry.range}\r\n                        onKeyPress={handleKeyPress}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                    />\r\n                    <div className={styles.flags}>\r\n                        <i\r\n                            className={`${flagClass} ${styles.warning} ${duplicate ? '' : styles.hidden}`}\r\n                            title='Duplicate: identical Domain/Range pair already exists'\r\n                        />\r\n                        <i\r\n                            className={`${flagClass} ${styles.error} ${fork ? '' : styles.hidden}`}\r\n                            title='Fork: The Domain is already in use'\r\n                        />\r\n                        <i\r\n                            className={`${flagClass} ${styles.error} ${chain ? '' : styles.hidden}`}\r\n                            title='Chain: the Range is already a Domain in another row'\r\n                        />\r\n                        <i\r\n                            className={`${flagClass} ${styles.severeError} ${cycle ? '' : styles.hidden}`}\r\n                            title='Cycle: Infinite loop detected'\r\n                        />\r\n                    </div>\r\n\r\n                    <button className={styles.btnDelete} onClick={handleDelete}>\r\n                        <i className='far fa-trash-alt'> </i>\r\n                    </button>\r\n                </div>\r\n            </GenericCard.Content>\r\n        </GenericCard>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    currentDictionary: state.dictionaries[ownProps.match.params.id]\r\n});\r\n\r\nexport default withRouter(\r\n    connect(\r\n        mapStateToProps,\r\n        { updateEntry, updateDictionary, removeEntryIdFromDictionary, removeEntry, clearEntryErrorFlags }\r\n    )(EntryCard)\r\n);\r\n","import React from 'react';\r\nimport styles from './Entries.module.scss';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { objToArrOrdered } from '../../../helpers';\r\nimport { connect } from 'react-redux';\r\nimport EntryCard from '../EntryCard/EntryCard';\r\n\r\nconst Entries = ({ entries }) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            {entries.length ? (\r\n                entries.map(entry => <EntryCard key={entry.id} entry={entry} />)\r\n            ) : (\r\n                <span>empty dictionary</span>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const currentDict = state.dictionaries[ownProps.match.params.id];\r\n    return {\r\n        entries: currentDict ? objToArrOrdered(state.entries, currentDict.entryIds) : []\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(Entries));\r\n","import React, { useEffect } from 'react';\r\nimport styles from './DictionaryDetailView.module.scss';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport NewEntryForm from './NewEntryForm/NewEntryForm.js';\r\nimport Header from './DetailViewHeader/DetailViewHeader.js';\r\nimport Entries from './Entries/Entries';\r\nimport ResponsiveContainer from '../ResponsiveContainer/ResponsiveContainer.js';\r\n\r\nconst DictionaryDetailView = ({ currentDictionary, history }) => {\r\n    useEffect(() => {\r\n        // redirect to homepage if currentDictionary invalid\r\n        if (!currentDictionary) {\r\n            history.push('/');\r\n        }\r\n    }, [currentDictionary]);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Header />\r\n            <ResponsiveContainer center={true}>\r\n                <NewEntryForm />\r\n                <Entries />\r\n            </ResponsiveContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const id = ownProps.match.params.id;\r\n    return {\r\n        currentDictionary: state.dictionaries[id]\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(DictionaryDetailView));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { store } from './store';\nimport App from './components/App';\nimport DictionaryListView from './components/DictionaryListView/DictionaryListView';\nimport DictionaryDetailView from './components/.DictionaryDetailView/DictionaryDetailView';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Switch>\n                <App>\n                    <Route path='/' exact component={DictionaryListView} />\n                    <Route path='/dict/:id' component={DictionaryDetailView} />\n                </App>\n            </Switch>\n        </Router>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}